### ğŸ”´ Co gdy potrzebujesz przechowaÄ‡ wiele danych?

# Listy to najczÄ™Å›ciej wykorzystywany sposÃ³b na zebranie wielu danych w jednÄ… caÅ‚oÅ›Ä‡, np. wiele plikÃ³w pod jednÄ… zmiennÄ….
# Inne opcje to: sÅ‚owniki (dict), zbiory (set), krotki (tuple), a takÅ¼e wÅ‚asne klasy.

### ğŸ”´ Tworzenie listy
files = ['plik.txt', 'nowy.txt']
print('files =', files)

phones = [123456789, 3746736473]
print('phones =', phones)

list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]  # listy moÅ¼na zagnieÅ¼dÅ¼aÄ‡
print('list_of_lists =', list_of_lists)

mixed = [1, 'plik.txt', ['nested', True]]  # w ramach listy moÅ¼na mieszaÄ‡ obiekty rÃ³Å¼nych typÃ³w, chociaÅ¼ rzadko ma to praktyczne zastosowanie
print(mixed)

# âœ… UÅ¼ywaj liczby mnogiej w nazwach zmiennych, pod ktÃ³rymi kryjÄ… siÄ™ listy.

### ğŸ”´ PÄ™tla for

print("Numery telefonÃ³w:")
for phone in phones:
    print('-', phone)

### ğŸ”´ Ä†wiczenie

# Napisz program, w ktÃ³rym definiujesz listÄ™ wydatkÃ³w (w postaci listy liczb), a nastÄ™pnie wyÅ›wietlasz ile wyniosÅ‚y CiÄ™ wszystkie wydatki razem.

# tworzeni listy wydatkÃ³w
expenses = [120.20, 500.00, 6.00, 12000.00, 453.00 ]
print('expenses =', expenses)
# #worzymy zmiennÄ… i ustawiamy wartosc poczÄ…tkowÄ… na 0
sum_expenses=0
# # uÅ¼ywamy pÄ™tli for do zsumowania wydatkÃ³w
for expens in expenses:
    sum_expenses += expens
print("Suma wydatkÃ³w: ",  sum_expenses)

# Inna wersja
wydatki = [100, 50, 75, 200, 30]  # przykÅ‚adowa lista wydatkÃ³w
suma_wydatkÃ³w = 0  # zmienna do przechowywania sumy
# PÄ™tla for, ktÃ³ra przechodzi przez kaÅ¼dy wydatek w liÅ›cie i dodaje go do sumy
for wydatek in wydatki:
    suma_wydatkÃ³w += wydatek

print("Suma wydatkÃ³w:", suma_wydatkÃ³w)

